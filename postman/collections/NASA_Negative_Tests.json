{
	"info": {
		"_postman_id": "34d829bd-190a-4914-9f72-8e69e2e00156",
		"name": "NASA_Negative_Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "29142931-34d829bd-190a-4914-9f72-8e69e2e00156"
	},
	"item": [
		{
			"name": "NASA APOD GET - Negative Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3b006919-f16a-448f-851f-078c5fda6e2a",
						"exec": [
							"// Error 400 is expected when an empty 'date' parameter is sent\r",
							"pm.test(\"Negative Test-3: Empty date param should return 400\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(400);\r",
							"});\r",
							"\r",
							"// ❌ Sending a date that is too old for the API to support is expected to return a 400 error\r",
							"pm.test(\"Negative Test-4: Unsupported old date (e.g., 1900-01-01) returns 400\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(400);\r",
							"});\r",
							"\r",
							"// ❌ API is expected to return error 400 when sending a date that has not yet happened (future)\r",
							"pm.test(\"Negative Test-5: Future date (e.g., 2100-12-31) returns 400\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(400);\r",
							"});\r",
							"\r",
							"// ❌ Error 400 is expected when the 'thumbs' parameter is given an invalid value other than true/false, such as string\r",
							"pm.test(\"Negative Test-6: Invalid 'thumbs' parameter value returns 400\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(400);\r",
							"});\r",
							"// ❌ The 'hd' parameter must be boolean; if an invalid value is sent, for example 'yes', 400 is expected\r",
							"pm.test(\"Negative Test-7: Invalid 'hd' parameter value returns 400\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(400);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "862faa81-24bd-46a6-aa93-b32303480693",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.nasa.gov/planetary/apod?api_key={{Nasa Api Key}}}",
					"protocol": "https",
					"host": [
						"api",
						"nasa",
						"gov"
					],
					"path": [
						"planetary",
						"apod"
					],
					"query": [
						{
							"key": "api_key",
							"value": "{{Nasa Api Key}}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "NASA NEO Feed GET - Negative Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "957862ee-796b-45b4-b885-e0facd455b24",
						"exec": [
							"// Tests the API to return a 400 error when the start_date parameter is not sent.\r",
							"pm.test(\"Negative Test-3: Missing start_date returns 400\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(400);\r",
							"});\r",
							"\r",
							"// ❌ If end_date is given before start_date, the API is expected to return error 400.\r",
							"pm.test(\"Negative Test-4: Invalid date range (end before start) returns 400\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(400);\r",
							"});\r",
							" \r",
							"// ❌ If the start_date format is incorrect (e.g. yyyy/mm/dd), the API should return 400.\r",
							"pm.test(\"Negative Test-5: Invalid date format in start_date returns 400\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(400);\r",
							"});\r",
							"\r",
							"// If the end_date parameter is given as an empty string, the API should return error 400.\r",
							"pm.test(\"Negative Test-6: Empty end_date returns 400\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(400);\r",
							"});\r",
							"\r",
							"// ⚠️ When a future date such as 2050 is sent, it is not guaranteed to return 400. API can return 200 with empty data.\r",
							"pm.test(\"Negative Test-7: Future date may return 200 with empty result, not necessarily 400\", function () {\r",
							"    pm.expect([200, 400]).to.include(pm.response.code); // Duruma göre uyarlanmalı\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "6442bc6f-1283-4ec7-9157-5d5fc9b067ac",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.nasa.gov/neo/rest/v1/feed?start_date=2015-09-07&end_date=2015-09-08&api_key={{Nasa Api Key}}}",
					"protocol": "https",
					"host": [
						"api",
						"nasa",
						"gov"
					],
					"path": [
						"neo",
						"rest",
						"v1",
						"feed"
					],
					"query": [
						{
							"key": "start_date",
							"value": "2015-09-07"
						},
						{
							"key": "end_date",
							"value": "2015-09-08"
						},
						{
							"key": "api_key",
							"value": "{{Nasa Api Key}}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "NASA NEO Detail GET - Negative Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3ad24df0-65e1-4b00-9e1d-d744eea150a6",
						"exec": [
							"// ❌ Invalid (non-existent) asteroid ID should return error 404\r",
							"pm.test(\"Negative Test-3: Non-existent NEO ID returns 404\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(404);\r",
							"});\r",
							"\r",
							"// ❌ If a non-numeric (containing letters) asteroid ID is entered, 400 should be returned\r",
							"pm.test(\"Negative Test-4: Non-numeric NEO ID returns 400\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(400);\r",
							"});\r",
							"\r",
							"// ❌ If an empty ID is entered (for example: /neo/), it should return 404\r",
							"pm.test(\"Negative Test-5: Empty NEO ID path returns 404\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(404);\r",
							"});\r",
							"\r",
							"// ❌ If there is a special character in the ID field (for example: neo/@!%), 400 should be returned\r",
							"pm.test(\"Negative Test-6: Special characters in NEO ID return 400\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(400);\r",
							"});\r",
							"\r",
							"// ❌ If there is a completely missing ID, such as null, the endpoint should return 404\r",
							"pm.test(\"Negative Test-7: Null or missing NEO ID returns 404\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(404);\r",
							"});\r",
							"\r",
							"\r",
							"// If the value \"is_potentially_hazardous_asteroid\" is unexpected\r",
							"pm.test(\"Negative Test-8: Unexpected hazardous flag\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.is_potentially_hazardous_asteroid).to.not.eql(true); \r",
							"});\r",
							"\r",
							"// If the NEO ID is numeric but contains spaces (e.g. \"3542 519\") an error is expected\r",
							"pm.test(\"Negative Test-9: NEO ID with space should return 400\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(400);\r",
							"});\r",
							"\r",
							"// If the API key received from Environment is incorrect (simulation)\r",
							"pm.test(\"Negative Test-10: Invalid API key returns 403 or 401\", function () {\r",
							"    var fakeKey = pm.environment.get(\"invalid_api_key\");\r",
							"    pm.expect([401, 403]).to.include(pm.response.code);\r",
							"});\r",
							"// Incoming ID should not match the correct ID in the environment (false ID simulation)\r",
							"pm.test(\"Negative Test-11: Mismatch with expected NEO ID in env\", function () {\r",
							"    var expectedId = pm.environment.get(\"correct_neo_id\");\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.not.eql(\"99999999\"); // we deliberately compare with different ID\r",
							"});\r",
							"\r",
							"//Error simulation if the asteroid name does not match the correct name in the environment\r",
							"pm.test(\"Negative Test-12: Mismatch asteroid name vs env variable\", function () {\r",
							"    var expectedName = \"FAKE_NAME_XYZ\";\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.not.eql(expectedName); // deliberately does not match the wrong name\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "d1191caa-8dbd-4e66-8750-cad0c6147f1b",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.nasa.gov/neo/rest/v1/neo/3542519?api_key={{Nasa Api Key}}",
					"protocol": "https",
					"host": [
						"api",
						"nasa",
						"gov"
					],
					"path": [
						"neo",
						"rest",
						"v1",
						"neo",
						"3542519"
					],
					"query": [
						{
							"key": "api_key",
							"value": "{{Nasa Api Key}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "NASA NEO Browse GET - Negative Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a35c091c-bed5-4ac8-ab47-d09a48dab705",
						"exec": [
							"\r",
							"// If the page number is entered as negative (example: -1), 400 is expected\r",
							"pm.test(\"Negative Test-3: Negative page number returns 400\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(400);\r",
							"});\r",
							"\r",
							"// Return 400 when a non-numeric page parameter is sent\r",
							"pm.test(\"Negative Test-4: Non-numeric page param returns 400\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(400);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"// Data should not be returned when a very large page number is sent\r",
							"pm.test(\"Negative Test-5: Exaggerated page value returns empty or 404\", function () {\r",
							"    pm.expect(jsonData.near_earth_objects.length).to.eql(0);\r",
							"});\r",
							"\r",
							"// Test should fail if API key environment variable is missing\r",
							"pm.test(\"Negative Test-6: API key env var is missing\", function () {\r",
							"    var apiKey = pm.environment.get(\"Nasa Api Key\");\r",
							"    pm.expect(apiKey, \"API Key environment variable not found\").to.not.be.undefined;\r",
							"});\r",
							"\r",
							"// If a field in the response does not match the environment (e.g. object count)\r",
							"pm.test(\"Negative Test-7: Object count doesn't match expected env value\", function () {\r",
							"    var expectedCount = pm.environment.get(\"expected_object_count\");\r",
							"    pm.expect(jsonData.page.size).to.not.eql(expectedCount); // bilinçli uyuşmazlık testi\r",
							"});\r",
							"\r",
							"//If the 'links' object is not in the response, the test must fail\r",
							"pm.test(\"Negative Test-8: Links object must exist\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"links\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "0b5d2265-e76d-42c9-864e-752cdd887c68",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.nasa.gov/neo/rest/v1/neo/browse?api_key={{Nasa Api Key}}",
					"protocol": "https",
					"host": [
						"api",
						"nasa",
						"gov"
					],
					"path": [
						"neo",
						"rest",
						"v1",
						"neo",
						"browse"
					],
					"query": [
						{
							"key": "api_key",
							"value": "{{Nasa Api Key}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "NASA OSDR File Access GET - Negative Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "772d2ff9-0669-4c8e-a358-10fc7c030048",
						"exec": [
							"\r",
							"//Return 401 or 403 if file access is unauthorised (no token or invalid)\r",
							"pm.test(\"Negative Test-3: Unauthorized access returns 401 or 403\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([401, 403]);\r",
							"});\r",
							"\r",
							"// If the ID part is entered as a string (e.g. abcde), error 400 should be returned\r",
							"pm.test(\"Negative Test-4: Non-numeric file ID returns 400\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(400);\r",
							"});\r",
							"\r",
							"// If there is a special character in the ID (for example %$#) API should return 400\r",
							"pm.test(\"Negative Test-3: Special characters in file ID return 400\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(400);\r",
							"});\r",
							"\r",
							"// If a very large or non-system ID is given, an empty result or 404 should be returned\r",
							"pm.test(\"Negative Test-4: Unreasonably large file ID returns 404\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(404);\r",
							"});\r",
							"\r",
							"// The test should fail if the file ID from the environment variable is missing\r",
							"pm.test(\"Negative Test-5: Missing file ID from environment\", function () {\r",
							"    var fileId = pm.environment.get(\"file_id\");\r",
							"    pm.expect(fileId, \"file_id environment variable not found\").to.not.be.undefined;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "05f184bd-adee-44e7-951f-544881a54e88",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://osdr.nasa.gov/osdr/data/osd/files/137.1,86-87",
					"protocol": "https",
					"host": [
						"osdr",
						"nasa",
						"gov"
					],
					"path": [
						"osdr",
						"data",
						"osd",
						"files",
						"137.1,86-87"
					]
				}
			},
			"response": []
		},
		{
			"name": "NASA Mars Insight Weather GET - Negative Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7e955652-25c0-49a6-a6e8-a4d91f142532",
						"exec": [
							"\r",
							"// 400 error should be expected if feedtype parameter is sent empty\r",
							"pm.test(\"Negative Test-3: Empty feedtype returns 400\", function () {\r",
							"    const feedtypeValue = pm.request.url.query.get('feedtype');\r",
							"    pm.expect(feedtypeValue).to.eql(\"\");\r",
							"    pm.expect(pm.response.code).to.eql(400);\r",
							"});\r",
							"\r",
							"// If API Key is not sent, error 401 or 403 should be returned\r",
							"pm.test(\"Negative Test-4: Missing API key returns 401 or 403\", function () {\r",
							"    const apiKey = pm.environment.get(\"Nasa Api Key\");\r",
							"    pm.expect(apiKey).to.not.be.undefined; // Key may be defined but not used\r",
							"    pm.expect([401, 403]).to.include(pm.response.code);\r",
							"});\r",
							"\r",
							"// Return 400 or 404 when all query parameters are removed (base URL only)\r",
							"pm.test(\"Negative Test-5: Missing all required parameters returns 400 or 404\", function () {\r",
							"    const url = pm.request.url.toString();\r",
							"    const requiredParams = ['api_key', 'feedtype', 'ver'];\r",
							"    requiredParams.forEach(param => pm.expect(url).to.include(param));\r",
							"    pm.expect([400, 404]).to.include(pm.response.code);\r",
							"});\r",
							"// return error 400 if the feedtype parameter contains an invalid value\r",
							"pm.test(\"Negative Test-6: Invalid feedtype returns 400\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(400);\r",
							"});\r",
							"\r",
							"// return 400 if the ver parameter contains a non-numeric value\r",
							"pm.test(\"Negative Test-7: Invalid ver param returns 400\", function () {\r",
							"    const verValue = pm.request.url.query.get('ver');\r",
							"    pm.expect(verValue).to.not.match(/^\\d+(\\.\\d+)?$/); // If it is not numerical, it is considered invalid\r",
							"    pm.expect(pm.response.code).to.eql(400);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "a714e61b-eed8-4080-b1a3-cd86c192139c",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.nasa.gov/insight_weather/?api_key={{Nasa Api Key}}&feedtype=json&ver=1.0",
					"protocol": "https",
					"host": [
						"api",
						"nasa",
						"gov"
					],
					"path": [
						"insight_weather",
						""
					],
					"query": [
						{
							"key": "api_key",
							"value": "{{Nasa Api Key}}"
						},
						{
							"key": "feedtype",
							"value": "json"
						},
						{
							"key": "ver",
							"value": "1.0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DONKI-CME-GET - Negative Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ef95edca-3629-42c7-86a3-042a11a8bdf2",
						"exec": [
							"\r",
							"// if startDate is a future date (for example 2100), the API should return an error\r",
							"pm.test(\"Negative Test-3: Future startDate should return error\", function () {\r",
							"    const startValue = pm.request.url.query.get('startDate');\r",
							"    const futureDate = new Date(startValue) > new Date();\r",
							"    pm.expect(futureDate).to.eql(true);\r",
							"    pm.expect([400, 404]).to.include(pm.response.code);\r",
							"});\r",
							"\r",
							"// If the API key is completely removed, error 401 or 403 should be received\r",
							"pm.test(\"Negative Test-4: Missing API key returns 401 or 403\", function () {\r",
							"    const apiKey = pm.environment.get(\"Nasa Api Key\");\r",
							"    pm.expect(apiKey).to.not.exist;\r",
							"    pm.expect([401, 403]).to.include(pm.response.code);\r",
							"});\r",
							"\r",
							"// If the date format is misspelled (e.g. 04-01-2025), API should return 400\r",
							"pm.test(\"Negative Test-5: Invalid date format returns 400\", function () {\r",
							"    const isInvalidFormat = !/^\\d{4}-\\d{2}-\\d{2}$/.test(pm.request.url.query.get('startDate'));\r",
							"    pm.expect(isInvalidFormat).to.eql(true);\r",
							"    pm.expect(pm.response.code).to.eql(400);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "8b3347b7-c80a-4903-8029-8d2c4ceed276",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.nasa.gov/DONKI/CME?startDate=2025-04-01&endDate=2025-04-30&api_key={{Nasa Api Key}}",
					"protocol": "https",
					"host": [
						"api",
						"nasa",
						"gov"
					],
					"path": [
						"DONKI",
						"CME"
					],
					"query": [
						{
							"key": "startDate",
							"value": "2025-04-01"
						},
						{
							"key": "endDate",
							"value": "2025-04-30"
						},
						{
							"key": "api_key",
							"value": "{{Nasa Api Key}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DONKI-CMEAnalysis-GET - Negative Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "41009a15-db3a-4630-a03e-cff2a15c5e9b",
						"exec": [
							"\r",
							"// return an error if the catalogue parameter contains a non-valid value\r",
							"pm.test(\"Negative Test-3: Invalid catalog value returns 400 or empty response\", function () {\r",
							"    const validCatalogs = ['ALL', 'DONKI', 'SEEDS', 'CACTUS'];\r",
							"    const catalog = pm.request.url.query.get('catalog');\r",
							"    pm.expect(validCatalogs).to.not.include(catalog);\r",
							"    pm.expect([400, 204, 404]).to.include(pm.response.code);\r",
							"});\r",
							"\r",
							"// If halfAngle is negative, the API should return the appropriate error\r",
							"pm.test(\"Negative Test-4: Negative halfAngle returns 400\", function () {\r",
							"    const angle = parseFloat(pm.request.url.query.get('halfAngle'));\r",
							"    pm.expect(angle < 0).to.eql(true);\r",
							"    pm.expect(pm.response.code).to.eql(400);\r",
							"});\r",
							"\r",
							"// If API key is missing, 401 or 403 error should be returned\r",
							"pm.test(\"Negative Test-5: Missing API Key returns 401 or 403\", function () {\r",
							"    const apiKey = pm.environment.get(\"Nasa Api Key\");\r",
							"    pm.expect(apiKey).to.not.exist;\r",
							"    pm.expect([401, 403]).to.include(pm.response.code);\r",
							"});\r",
							"// if startDate parameter is missing, wait 400\r",
							"pm.test(\"Negative Test-6: Missing startDate returns 400\", function () {\r",
							"    const hasStart = pm.request.url.query.has('startDate');\r",
							"    pm.expect(hasStart).to.eql(false);\r",
							"    pm.expect(pm.response.code).to.eql(400);\r",
							"});\r",
							"\r",
							"// if the speed parameter is not numeric (e.g. 'fast'), error 400 should be returned\r",
							"pm.test(\"Negative Test-7: Non-numeric speed returns 400\", function () {\r",
							"    const speed = pm.request.url.query.get('speed');\r",
							"    const isNotNumeric = isNaN(speed);\r",
							"    pm.expect(isNotNumeric).to.eql(true);\r",
							"    pm.expect(pm.response.code).to.eql(400);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "9f4b3644-ae2b-4eb9-b12b-f351ef495fbb",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.nasa.gov/DONKI/CMEAnalysis?startDate=2025-04-01&endDate=2025-04-30&mostAccurateOnly=true&speed=500&halfAngle=30&catalog=ALL&api_key={{Nasa Api Key}}",
					"protocol": "https",
					"host": [
						"api",
						"nasa",
						"gov"
					],
					"path": [
						"DONKI",
						"CMEAnalysis"
					],
					"query": [
						{
							"key": "startDate",
							"value": "2025-04-01"
						},
						{
							"key": "endDate",
							"value": "2025-04-30"
						},
						{
							"key": "mostAccurateOnly",
							"value": "true"
						},
						{
							"key": "speed",
							"value": "500"
						},
						{
							"key": "halfAngle",
							"value": "30"
						},
						{
							"key": "catalog",
							"value": "ALL"
						},
						{
							"key": "api_key",
							"value": "{{Nasa Api Key}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DONKI-GST-GET - Negative Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bb615295-5f3e-40bf-9f4e-99f2fbe94a70",
						"exec": [
							"// Checks the validity of the date format (YYYY-MM-DD)\r",
							"function isValidDateFormat(dateStr) {\r",
							"    return /^\\d{4}-\\d{2}-\\d{2}$/.test(dateStr);\r",
							"}\r",
							"\r",
							"// should return error 400 when startDate is missing\r",
							"pm.test(\"Negative Test-1: Missing startDate returns 400\", function () {\r",
							"    const hasStart = pm.request.url.query.has('startDate');\r",
							"    pm.expect(hasStart).to.eql(false, \"startDate eksik değil!\");\r",
							"    pm.expect(pm.response.code).to.eql(400);\r",
							"}); \r",
							"\r",
							"// If the endDate format is incorrect (example: 2025/04/30), wait 400\r",
							"pm.test(\"Negative Test-2: Invalid endDate format returns 400\", function () {\r",
							"    const endDate = pm.request.url.query.get('endDate');\r",
							"    pm.expect(isValidDateFormat(endDate)).to.eql(false, \"endDate formatı geçerli!\");\r",
							"    pm.expect(pm.response.code).to.eql(400);\r",
							"});\r",
							"\r",
							"// date range must be invalid if endDate is before startDate\r",
							"pm.test(\"Negative Test-3: endDate before startDate returns 400\", function () {\r",
							"    const start = new Date(pm.request.url.query.get('startDate'));\r",
							"    const end = new Date(pm.request.url.query.get('endDate'));\r",
							"    pm.expect(end < start).to.eql(true, \"endDate, startDate'ten sonra!\");\r",
							"    pm.expect(pm.response.code).to.eql(400);\r",
							"});\r",
							"\r",
							"//  API should return empty or 400 when given a future date range\r",
							"pm.test(\"Negative Test-4: Future date range returns 204 or 400\", function () {\r",
							"    const start = new Date(pm.request.url.query.get('startDate'));\r",
							"    const now = new Date();\r",
							"    pm.expect(start > now).to.eql(true, \"Gelecek tarih değil!\");\r",
							"    pm.expect([204, 400]).to.include(pm.response.code);\r",
							"});\r",
							"\r",
							"// If API key is missing, it should return 401 or 403\r",
							"pm.test(\"Negative Test-5: Missing API key returns 401 or 403\", function () {\r",
							"    const apiKey = pm.environment.get(\"Nasa Api Key\");\r",
							"    pm.expect(apiKey).to.not.exist;\r",
							"    pm.expect([401, 403]).to.include(pm.response.code);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "8d428a28-2565-47c7-83e9-8333814a3ed3",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.nasa.gov/DONKI/GST?startDate=2025-04-01&endDate=2025-04-30&api_key={{Nasa Api Key}}",
					"protocol": "https",
					"host": [
						"api",
						"nasa",
						"gov"
					],
					"path": [
						"DONKI",
						"GST"
					],
					"query": [
						{
							"key": "startDate",
							"value": "2025-04-01"
						},
						{
							"key": "endDate",
							"value": "2025-04-30"
						},
						{
							"key": "api_key",
							"value": "{{Nasa Api Key}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DONKI-IPS-GET - Negative Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bbe991cb-ebf6-42cd-8246-ed457e67e6d7",
						"exec": [
							"// Current date format check (YYYY-MM-DD)\r",
							"function isValidDate(str) {\r",
							"    return /^\\d{4}-\\d{2}-\\d{2}$/.test(str);\r",
							"}\r",
							"\r",
							"// API should return 400 when startDate is missing\r",
							"pm.test(\"Negative Test 3: Missing startDate returns 400\", function () {\r",
							"    const hasStart = pm.request.url.query.has('startDate');\r",
							"    pm.expect(hasStart).to.eql(false, \"startDate parametresi eksik değil!\");\r",
							"    pm.expect(pm.response.code).to.eql(400);\r",
							"});\r",
							"\r",
							"// If the endDate format is invalid (e.g. 2025/04/30), the API should return 400\r",
							"pm.test(\"Negative Test 4: Invalid endDate format returns 400\", function () {\r",
							"    const end = pm.request.url.query.get('endDate');\r",
							"    pm.expect(isValidDate(end)).to.eql(false, \"endDate formatı doğru!\");\r",
							"    pm.expect(pm.response.code).to.eql(400);\r",
							"});\r",
							"\r",
							"// Return 400 if an invalid location parameter (e.g. Mars) is sent\r",
							"pm.test(\"Negative Test 5: Invalid location param returns 400\", function () {\r",
							"    const location = pm.request.url.query.get('location');\r",
							"    pm.expect([\"Earth\", \"L1\"]).to.not.include(location);\r",
							"    pm.expect(pm.response.code).to.eql(400);\r",
							"});\r",
							"\r",
							"// If the catalogue parameter is empty or null, return 400\r",
							"pm.test(\"Negative Test 6: Empty catalog param returns 400\", function () {\r",
							"    const catalog = pm.request.url.query.get('catalog');\r",
							"    pm.expect(!catalog || catalog.trim() === \"\").to.be.true;\r",
							"    pm.expect(pm.response.code).to.eql(400);\r",
							"});\r",
							"\r",
							"// if startDate is in the future (e.g. 2050-01-01), it may return 204 or 400\r",
							"pm.test(\"Negative Test 7: Future startDate returns 204 or 400\", function () {\r",
							"    const start = new Date(pm.request.url.query.get('startDate'));\r",
							"    const now = new Date();\r",
							"    pm.expect(start > now).to.eql(true, \"Tarih gelecekte değil!\");\r",
							"    pm.expect([204, 400]).to.include(pm.response.code);\r",
							"});\r",
							"\r",
							"// If API key is missing, it should return 401 or 403\r",
							"pm.test(\"Negative Test 8: Missing API key returns 401 or 403\", function () {\r",
							"    const key = pm.environment.get(\"Nasa Api Key\");\r",
							"    pm.expect(!key).to.be.true;\r",
							"    pm.expect([401, 403]).to.include(pm.response.code);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "795f5c71-0b33-4be4-8f89-7273671fcb2c",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.nasa.gov/DONKI/IPS?startDate=2025-04-01&endDate=2025-04-30&location=Earth&catalog=ALL&api_key={{Nasa Api Key}}",
					"protocol": "https",
					"host": [
						"api",
						"nasa",
						"gov"
					],
					"path": [
						"DONKI",
						"IPS"
					],
					"query": [
						{
							"key": "startDate",
							"value": "2025-04-01"
						},
						{
							"key": "endDate",
							"value": "2025-04-30"
						},
						{
							"key": "location",
							"value": "Earth"
						},
						{
							"key": "catalog",
							"value": "ALL"
						},
						{
							"key": "api_key",
							"value": "{{Nasa Api Key}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DONKI-FLR-GET - Negative Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bdce68ac-ae28-49cd-92a3-df8ca662d33a",
						"exec": [
							"// Date format check\r",
							"function isValidDateFormat(date) {\r",
							"    return /^\\d{4}-\\d{2}-\\d{2}$/.test(date);\r",
							"}\r",
							"\r",
							"// return 400 if startDate parameter is missing\r",
							"pm.test(\"Negative Test 3: Missing startDate param returns 400\", function () {\r",
							"    const hasStartDate = pm.request.url.query.has('startDate');\r",
							"    pm.expect(hasStartDate).to.eql(false, \"startDate mevcut!\");\r",
							"    pm.expect(pm.response.code).to.eql(400);\r",
							"});\r",
							"\r",
							"// return 400 if endDate is before startDate\r",
							"pm.test(\"Negative Test 4: endDate earlier than startDate returns 400\", function () {\r",
							"    const start = new Date(pm.request.url.query.get('startDate'));\r",
							"    const end = new Date(pm.request.url.query.get('endDate'));\r",
							"    pm.expect(end < start).to.be.true;\r",
							"    pm.expect(pm.response.code).to.eql(400);\r",
							"});\r",
							"\r",
							"// return 400 if startDate format is incorrect (e.g. 2025/04/01)\r",
							"pm.test(\"Negative Test 5: Invalid date format in startDate returns 400\", function () {\r",
							"    const start = pm.request.url.query.get('startDate');\r",
							"    pm.expect(isValidDateFormat(start)).to.eql(false);\r",
							"    pm.expect(pm.response.code).to.eql(400);\r",
							"});\r",
							"\r",
							"// If an empty endDate parameter is sent, return 400\r",
							"pm.test(\"Negative Test 6: Empty endDate returns 400\", function () {\r",
							"    const end = pm.request.url.query.get('endDate');\r",
							"    pm.expect(end === \"\").to.be.true;\r",
							"    pm.expect(pm.response.code).to.eql(400);\r",
							"});\r",
							"\r",
							"// return 204 or 400 if startDate is in the future (e.g. 2050-01-01)\r",
							"pm.test(\"Negative Test 7: Future startDate returns 204 or 400\", function () {\r",
							"    const start = new Date(pm.request.url.query.get('startDate'));\r",
							"    const now = new Date();\r",
							"    pm.expect(start > now).to.eql(true);\r",
							"    pm.expect([204, 400]).to.include(pm.response.code);\r",
							"});\r",
							"\r",
							"// If API key is empty or missing, it should return 401 or 403\r",
							"pm.test(\"Negative Test 8: Missing or empty API key returns 401 or 403\", function () {\r",
							"    const key = pm.request.url.query.get('api_key');\r",
							"    pm.expect(!key || key.trim() === \"\").to.be.true;\r",
							"    pm.expect([401, 403]).to.include(pm.response.code);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "3b3849c8-d605-4737-bc75-d54966b4ca52",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.nasa.gov/DONKI/FLR?startDate=2025-04-01&endDate=2025-04-30&api_key={{Nasa Api Key}}",
					"protocol": "https",
					"host": [
						"api",
						"nasa",
						"gov"
					],
					"path": [
						"DONKI",
						"FLR"
					],
					"query": [
						{
							"key": "startDate",
							"value": "2025-04-01"
						},
						{
							"key": "endDate",
							"value": "2025-04-30"
						},
						{
							"key": "api_key",
							"value": "{{Nasa Api Key}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DONKI-SEP-GET - Negative Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "170cdeb1-9044-4442-8a6c-4c562e3ab0ae",
						"exec": [
							"// Missing endDate parameter should return 400\r",
							"pm.test(\"Negative Test 3: Missing endDate returns 400\", function () {\r",
							"    const hasEndDate = pm.request.url.query.has('endDate');\r",
							"    pm.expect(hasEndDate).to.eql(false, \"endDate parametresi gönderilmiş!\");\r",
							"    pm.expect(pm.response.code).to.eql(400);\r",
							"});\r",
							"\r",
							"// Invalid date range (endDate < startDate) error should return 400\r",
							"pm.test(\"Negative Test 4: Invalid date range returns 400\", function () {\r",
							"    const start = new Date(pm.request.url.query.get('startDate'));\r",
							"    const end = new Date(pm.request.url.query.get('endDate'));\r",
							"    pm.expect(end < start).to.be.true;\r",
							"    pm.expect(pm.response.code).to.eql(400);\r",
							"});\r",
							"\r",
							"// If a future date range is entered, 204 or 400 should be returned\r",
							"pm.test(\"Negative Test 5: Future date range returns 204 or 400\", function () {\r",
							"    const start = new Date(pm.request.url.query.get('startDate'));\r",
							"    const now = new Date();\r",
							"    pm.expect(start > now).to.be.true;\r",
							"    pm.expect([204, 400]).to.include(pm.response.code);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "552f6629-a514-42d5-93b4-63c3a8962087",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.nasa.gov/DONKI/SEP?startDate=2025-04-01&endDate=2025-04-30&api_key={{Nasa Api Key}}",
					"protocol": "https",
					"host": [
						"api",
						"nasa",
						"gov"
					],
					"path": [
						"DONKI",
						"SEP"
					],
					"query": [
						{
							"key": "startDate",
							"value": "2025-04-01"
						},
						{
							"key": "endDate",
							"value": "2025-04-30"
						},
						{
							"key": "api_key",
							"value": "{{Nasa Api Key}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DONKI-MPC-GET - Negative Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d1cabf1a-3c0d-4d5d-bd42-f1ea7225ab21",
						"exec": [
							"// If 'endDate' is missing, the API should return 400 Bad Request\r",
							"pm.test(\"Negative Test 3: Missing 'endDate' should return 400\", function () {\r",
							"    const hasEndDate = pm.request.url.query.has('endDate');\r",
							"    pm.expect(hasEndDate, \"'endDate' parameter should be missing for this test\").to.eql(false);\r",
							"    pm.expect(pm.response.code).to.eql(400);\r",
							"});\r",
							"\r",
							"// If 'endDate' is earlier than 'startDate', the API should return 400\r",
							"pm.test(\"Negative Test 4: 'endDate' before 'startDate' should return 400\", function () {\r",
							"    const startDate = new Date(pm.request.url.query.get('startDate'));\r",
							"    const endDate = new Date(pm.request.url.query.get('endDate'));\r",
							"    pm.expect(endDate < startDate, \"'endDate' must be earlier than 'startDate' for this test\").to.be.true;\r",
							"    pm.expect(pm.response.code).to.eql(400);\r",
							"});\r",
							"\r",
							"// If the date range is too far in the future, expect 204 No Content or 400 Bad Request\r",
							"pm.test(\"Negative Test 5: Future date range should return 204 or 400\", function () {\r",
							"    const start = new Date(pm.request.url.query.get('startDate'));\r",
							"    const now = new Date();\r",
							"    pm.expect(start > now, \"'startDate' should be in the future\").to.be.true;\r",
							"    pm.expect([204, 400]).to.include(pm.response.code);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "c9d8322f-0365-4c8b-b116-a36ad73c4fc9",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.nasa.gov/DONKI/MPC?startDate=2025-04-01&endDate=2025-04-30&api_key={{Nasa Api Key}}",
					"protocol": "https",
					"host": [
						"api",
						"nasa",
						"gov"
					],
					"path": [
						"DONKI",
						"MPC"
					],
					"query": [
						{
							"key": "startDate",
							"value": "2025-04-01"
						},
						{
							"key": "endDate",
							"value": "2025-04-30"
						},
						{
							"key": "api_key",
							"value": "{{Nasa Api Key}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DONKI-RBE-GET - Negative Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7b70882f-550c-463e-9f1f-4383f8e4ccdf",
						"exec": [
							"// If 'startDate' is missing, the API should return 400 Bad Request\r",
							"pm.test(\"Negative Test 3: Missing 'startDate' should return 400\", function () {\r",
							"    const hasStart = pm.request.url.query.has('startDate');\r",
							"    pm.expect(hasStart, \"'startDate' should be missing\").to.eql(false);\r",
							"    pm.expect(pm.response.code).to.eql(400);\r",
							"});\r",
							"\r",
							"// Invalid 'rbe_level' value should trigger 400\r",
							"pm.test(\"Negative Test 4: Invalid 'rbe_level' should return 400\", function () {\r",
							"    const level = pm.request.url.query.get('rbe_level');\r",
							"    const validLevels = ['low', 'moderate', 'high']; // hypothetical values\r",
							"    pm.expect(validLevels.includes(level), \"Value should be invalid\").to.eql(false);\r",
							"    pm.expect(pm.response.code).to.eql(400);\r",
							"});\r",
							"\r",
							"// If date format is incorrect (e.g., MM/DD/YYYY), return 400\r",
							"pm.test(\"Negative Test 5: Wrong date format should return 400\", function () {\r",
							"    const datePattern = /^\\d{4}-\\d{2}-\\d{2}$/;\r",
							"    const start = pm.request.url.query.get('startDate');\r",
							"    const end = pm.request.url.query.get('endDate');\r",
							"    pm.expect(datePattern.test(start), \"Start date format should be wrong\").to.eql(false);\r",
							"    pm.expect(datePattern.test(end), \"End date format should be wrong\").to.eql(false);\r",
							"    pm.expect(pm.response.code).to.eql(400);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "e7cd7a14-ad23-4749-a644-4d82c6fff143",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.nasa.gov/DONKI/RBE?startDate=2025-04-01&endDate=2025-04-30&api_key={{Nasa Api Key}}&rbe_level=high",
					"protocol": "https",
					"host": [
						"api",
						"nasa",
						"gov"
					],
					"path": [
						"DONKI",
						"RBE"
					],
					"query": [
						{
							"key": "startDate",
							"value": "2025-04-01"
						},
						{
							"key": "endDate",
							"value": "2025-04-30"
						},
						{
							"key": "api_key",
							"value": "{{Nasa Api Key}}"
						},
						{
							"key": "rbe_level",
							"value": "high"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DONKI-HSS-GET - Negative Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b0514dd4-66e6-4dcc-915f-18383267f63a",
						"exec": [
							"\r",
							"// When the startDate parameter is sent missing, the server should give 400 Bad Request error.\r",
							"pm.test(\"Negative Test-3: Missing startDate returns 400\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Negative Test-4: Invalid date format returns 400\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(400);\r",
							"});\r",
							"// If the startDate or endDate is not in \"YYYYY-MM-DD\" format (for example \"04-01-2025\"), the API should return a 400 error.\r",
							"\r",
							"pm.test(\"Negative Test-5: No data for same-day date range should return 204 or empty array\", function () {\r",
							"    var data = pm.response.json();\r",
							"    pm.expect(data.length === 0 || pm.response.code === 204).to.be.true;\r",
							"});\r",
							"// If the same day is entered (example: startDate = endDate) and there is no data, return empty.\r",
							"// Note: If the API returns 200 and returns an empty array, this is also acceptable, but may catch a fail test.\r",
							"\r",
							"pm.test(\"Negative Test-6: Future date range should return empty array\", function () {\r",
							"    var data = pm.response.json();\r",
							"    pm.expect(data.length).to.eql(0);\r",
							"});\r",
							"// For future requests such as 2100, no data is expected. If it returns, the API may be providing incorrect data.\r",
							"\r",
							"pm.test(\"Negative Test-7: Invalid mpc_status value returns 400\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(400);\r",
							"});\r",
							"// If nonsense values like mpc_status=\"banana\" are sent, the API should reject it.\r",
							"\r",
							"pm.test(\"Negative Test-8: Empty API key returns 401 or 403\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([401, 403]);\r",
							"});\r",
							"// When the API key is sent as an empty string, it should be considered an unauthorised request.\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "f457fc64-c0ea-422c-a7a3-81f5de9b3ba6",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.nasa.gov/DONKI/HSS?startDate=2025-04-01&endDate=2025-04-30&api_key={{Nasa Api Key}}&mpc_status=active",
					"protocol": "https",
					"host": [
						"api",
						"nasa",
						"gov"
					],
					"path": [
						"DONKI",
						"HSS"
					],
					"query": [
						{
							"key": "startDate",
							"value": "2025-04-01"
						},
						{
							"key": "endDate",
							"value": "2025-04-30"
						},
						{
							"key": "api_key",
							"value": "{{Nasa Api Key}}"
						},
						{
							"key": "mpc_status",
							"value": "active"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DONKI-WSA-GET - Negative Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1109b21a-bdfa-453a-bf76-df55fd6ac752",
						"exec": [
							"pm.test(\"Negative Test-3: Missing parameters return error\", function () {\r",
							"    pm.expect([400, 404]).to.include(pm.response.code);\r",
							"});\r",
							"// The API should return error code 400 or 404 when the required parameters are missing.\r",
							"\r",
							"pm.test(\"Negative Test-4: Invalid date format returns 400\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(400);\r",
							"});\r",
							"\r",
							"// If the date range does not make sense (endDate < startDate), the server should return error 400.\r",
							"pm.test(\"Negative Test-5: Invalid API key returns 401 or 403\", function () {\r",
							"    pm.expect([401, 403]).to.include(pm.response.code);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "d8da235f-f042-4433-b3b4-1f6ede112827",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.nasa.gov/DONKI/WSAEnlilSimulations?startDate=2025-04-01&endDate=2025-04-01&api_key={{Nasa Api Key}}",
					"protocol": "https",
					"host": [
						"api",
						"nasa",
						"gov"
					],
					"path": [
						"DONKI",
						"WSAEnlilSimulations"
					],
					"query": [
						{
							"key": "startDate",
							"value": "2025-04-01"
						},
						{
							"key": "endDate",
							"value": "2025-04-01"
						},
						{
							"key": "api_key",
							"value": "{{Nasa Api Key}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Earth-Assets-GET - Negative Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "044bda40-0840-410c-9726-25f7a3c52dc8",
						"exec": [
							"// If the 'dim' parameter is invalid, the server should return error 400.\r",
							"pm.test(\"Negative Test-3: Invalid dim value returns 400\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(400);\r",
							"});\r",
							"\r",
							"// If only 'lat' is missing, the API should still return 400 Bad Request error.\r",
							"var jsonObject = pm.response.json();\r",
							"console.log(\"❌ EARTH JSON ERROR:\", jsonObject);\r",
							"\r",
							"pm.test(\"Negative Test-4: Missing lat should return 400\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(400);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "794626a9-2c31-450b-a04b-e37cb11fb9c6",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.nasa.gov/planetary/earth/assets?lon=-95.33&lat=29.78&date=2018-01-01&&dim=0.10&api_key={{Nasa Api Key}}",
					"protocol": "https",
					"host": [
						"api",
						"nasa",
						"gov"
					],
					"path": [
						"planetary",
						"earth",
						"assets"
					],
					"query": [
						{
							"key": "lon",
							"value": "-95.33"
						},
						{
							"key": "lat",
							"value": "29.78"
						},
						{
							"key": "date",
							"value": "2018-01-01"
						},
						{
							"key": null,
							"value": null
						},
						{
							"key": "dim",
							"value": "0.10"
						},
						{
							"key": "api_key",
							"value": "{{Nasa Api Key}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "31c15e5f-5485-4218-a02e-5ee3881423e6",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "c553166a-a274-430d-8a38-d86e5ad59aac",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.test(\"Negative Test-1: Verify error for invalid API key\", function () {\r",
					"    pm.expect(pm.response.code).to.be.oneOf([401, 403]);\r",
					"});\r",
					"\r",
					"pm.test(\"Negative Test-2: Response time is less than 1000ms\", function () {\r",
					"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
					"});"
				]
			}
		}
	]
}